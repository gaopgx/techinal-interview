## 1. Java 中操作字符串都有哪些类？它们之间有什么区别？
操作字符串的类有： String 、 StringBuffer 、 StringBuilder 。
String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成
新的 String 对象，然后将指针指向新的 String 对象。
而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况
下最好不要使用 String。
StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是
非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，
所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。

## 2. String、StringBuffer和StringBuilder区别(类似上一题)
1、数据可变和不可变
1. String 底层使用一个不可变的字符数组 private final char value[]; 所以它内容不可变。
2. StringBuffer 和 StringBuilder 都继承了 AbstractStringBuilder 底层使用的是可变字符数
组： char[] value;
2、线程安全
StringBuilder 是线程不安全的，效率较高；而 StringBuffer 是线程安全的，效率较低。
通过他们的 append() 方法来看， StringBuffer 是有同步锁，而 StringBuilder 没有：

@Override
public synchronized StringBuffer append(Object obj) {
toStringCache = null;
super.append(String.valueOf(obj));
return this;
}
@Override
public StringBuilder append(String str) {
super.append(str);
return this;
}
3、 相同点
StringBuilder 与 StringBuffer 有公共父类 AbstractStringBuilder 。
最后，操作可变字符串速度： StringBuilder > StringBuffer > String ，这个答案就显得不足为奇
了。

## 4. String str="i"与 String str=new String("i")一样吗
#不一样，因为内存的分配方式不一样。String str="i"的方式，Java 虚拟机会将其分配到常量池中；而
String str=new String("i") 则会被分到堆内存中。
代码示例：
String x = "叶痕秋";
String y = "叶痕秋";
String z = new String("叶痕秋");
System.out.println(x == y); // true
System.out.println(x == z); // false

String x = "叶痕秋" 的方式，Java 虚拟机会将其分配到常量池中，而常量池中没有重复的元素，比如当
执行“叶痕秋”时，java虚拟机会先在常量池中检索是否已经有“叶痕秋”，如果有那么就将“叶痕秋”的地址
赋给变量，如果没有就创建一个，然后在赋给变量；
而 String z = new String(“叶痕秋”) 则会被分到堆内存中，即使内容一样还是会创建新的对象。

## 5. String 类的常用方法都有那些？

indexOf()：返回指定字符的索引。
charAt()：返回指定索引处的字符。
replace()：字符串替换。
trim()：去除字符串两端空白。
split()：分割字符串，返回一个分割后的字符串数组。
getBytes()：返回字符串的 byte 类型数组。
length()：返回字符串长度。
toLowerCase()：将字符串转成小写字母。
toUpperCase()：将字符串转成大写字符。
substring()：截取字符串。
equals()：字符串比较。

## 6. String s = new String("xyz");创建了几个StringObject？是否可以继承String类?

两个或一个都有可能，”xyz”对应一个对象，这个对象放在字符串常量缓冲区，常量”xyz”不管出现多少
遍，都是缓冲区中的那一个。NewString每写一遍，就创建一个新的对象，它使用常量”xyz”对象的内容
来创建出一个新String对象。如果以前就用过’xyz’，那么这里就不会创建”xyz”了，直接从缓冲区拿，这
时创建了一个StringObject；但如果以前没有用过"xyz"，那么此时就会创建一个对象并放入缓冲区，这
种情况它创建两个对象。至于String类是否继承，答案是否定的，因为String默认final修饰，是不可继承
的。

## 7. 下面这条语句一共创建了多少个对象：Strings="a"+"b"+"c"+"d"
对于如下代码：
String s1 = "a";
String s2 = s1 + "b";
String s3 = "a" + "b";
System.out.println(s2 == "ab");
System.out.println(s3 == "ab");
第一条语句打印的结果为false，第二条语句打印的结果为true，这说明javac编译可以对字符串常量直接
相加的表达式进行优化，不必要等到运行期再去进行加法运算处理，而是在编译时去掉其中的加号，直
接将其编译成一个这些常量相连的结果。
题目中的第一行代码被编译器在编译时优化后，相当于直接定义了一个”abcd”的字符串，所以，上面的
代码应该只创建了一个String对象。
最终打印的结果应该为true。

## 8. 简述Java中的集合

1. Collection下：List系(有序、元素允许重复)和Set系(无序、元素不重复)
set根据equals和hashcode判断，一个对象要存储在Set中，必须重写equals和hashCode方
法
2. Map下：HashMap线程不同步；TreeMap线程同步
3. Collection系列和Map系列：Map是对Collection的补充，两个没什么关系

## 9. List、Map、Set三个接口，存取元素时，各有什么特点？

首先，List与Set具有相似性，它们都是单列元素的集合，所以，它们有一个共同的父接口，叫
Collection。
1、Set里面不允许有重复的元素
即不能有两个相等（注意，不是仅仅是相同）的对象，即假设Set集合中有了一个A对象，现在我要向Set
集合再存入一个B对象，但B对象与A对象equals相等，则B对象存储不进去，所以，Set集合的add方法
有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true，
当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。Set取
元素时，不能细说要取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。

2、List表示有先后顺序的集合

注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(Obje)方法时，每次加入的对
象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用
add(intindex,Obj e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进List
中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集
合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个
索引指向了这个对象。List除了可以用Iterator接口取得所有的元素，再逐一遍历各个元素之外，还可以
调用get(index i)来明确说明取第几个。

3、Map与List和Set不同
它是双列的集合，其中有put方法，定义如下：put(obj key,obj value)，每次存储时，要存储一对
key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。取则可以根据key获得相应
的value，即get(Object key)返回值为key所对应的value。另外，也可以获得所有的key的结合，还可以
获得所有的value的结合，还可以获得key和value组合成的Map.Entry对象的集合。

总结
List以特定次序来持有元素，可有重复元素。Set无法拥有重复元素,内部排序。Map保存key-value值，
value可多值。

## 10. Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()?它们有何区别?
Set里的元素是不能重复的，元素重复与否是使用equals()方法进行判断的。
==和equal区别也是考烂了的题，这里再重复说一下：
==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否
相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。
equals方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的
两个对象是独立的。
比如：两条new语句创建了两个对象，然后用a/b这两个变量分别指向了其中一个对象，这是两个不同的
对象，它们的首地址是不同的，即a和b中存储的数值是不相同的，所以，表达式a==b将返回false，而
这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。

## 11. ArrayList和LinkedList区别？

1. ArrayList是实现了基于动态数组的数据结构，LinkedList基于链表的数据结构。
2. 对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。
3. 对于新增和删除操作add和remove，LinedList比较占优势，因为ArrayList要移动数据。


## 12. ArrayList和Vector的区别

两个类都实现了List接口（List接口继承了 Collection 接口），他们都是有序集合，即存储在这两个集
合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素，
并且其中的数据是允许重复的，这是与 HashSet 之类的集合的最大不同处， HashSet 之类的集合不可以
按索引号去检索其中的元素，也不允许有重复的元素。
ArrayList与Vector的区别主要包括两个方面：

同步性：
Vector 是线程安全的，也就是说是它的方法之间是线程同步的，而 ArrayList 是线程序不安全的，它
的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用 ArrayList ，因为它不考
虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用 Vector ，因为不需要我们自
己再去考虑和编写线程安全的代码。
数据增长：
ArrayList 与 Vector 都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需
要增加 ArrayList 与 Vector 的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增
加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。
Vector 默认增长为原来两倍，而 ArrayList 的增长策略在文档中没有明确规定（从源代码看到的是增
长为原来的1.5倍）。 ArrayList 与 Vector 都可以设置初始的空间大小， Vector 还可以设置增长的空
间大小，而 ArrayList 没有提供设置增长空间的方法。
总结：即Vector增长原来的一倍， ArrayList 增加原来的0.5倍。


## 13. ArrayList,Vector,LinkedList的存储性能和特性
ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入
元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据
快而插入数据慢，
Vector 由于使用了 synchronized 方法（线程安全），通常性能上较 ArrayList 差。而 LinkedList
使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，索引就变慢了，但是插入数据时只
需要记录本项的前后项即可，所以插入速度较快。
LinkedList 也是线程不安全的， LinkedList 提供了一些方法，使得 LinkedList 可以被当作堆栈和
队列来使用。

## 14. HashMap和Hashtable的区别

HashMap 是 Hashtable 的轻量级实现（非线程安全的实现），他们都完成了Map接口，
主要区别在于 HashMap 允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，
效率要高于 Hashtable 。
HashMap 允许将null作为一个entry的key或者value，而 Hashtable 不允许。
HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsvalue 和 containsKey 。因为
contains方法容易让人引起误解。
Hashtable 继承自 Dictionary 类，而 HashMap 是Java1.2引进的Map interface的一个实现。

最大的不同是， Hashtable 的方法是 Synchronize 的，而 HashMap 不是，在多个线程访问 Hashtable
时，不需要自己为它的方法实现同步，而 HashMap 就必须为之提供同步。
就 HashMap 与 HashTable 主要从三方面来说。
历史原因: Hashtable 是基于陈旧的 Dictionary 类的， HashMap 是Java 1.2引进的Map接口的一
个实现
同步性: Hashtable 是线程安全的，也就是说是同步的，而 HashMap 是线程序不安全的，不是同步
的
值：只有 HashMap 可以让你将空值作为一个表的条目的key或value

## 15. Java中的同步集合与并发集合有什么区别？

同步集合与并发集合都为多线程和并发提供了合适的线程安全的集合，不过并发集合的可扩展性更高。
在Java1.5之前程序员们只有同步集合来用且在多线程并发的时候会导致争用，阻碍了系统的扩展性。
Java5介绍了并发集合 ConcurrentHashMap ，不仅提供线程安全还用锁分离和内部分区等现代技术提高
了可扩展性。
不管是同步集合还是并发集合他们都支持线程安全，他们之间主要的区别体现在性能和可扩展性，还有
他们如何实现的线程安全上。
同步 HashMap , Hashtable , HashSet , Vector , ArrayList 相比他们并发的实现
（ ConcurrentHashMap , CopyOnWriteArrayList , CopyOnWriteHashSet ）会慢得多。造成如此慢的
主要原因是锁， 同步集合会把整个Map或List锁起来，而并发集合不会。并发集合实现线程安全是通过
使用先进的和成熟的技术像锁剥离。
比如 ConcurrentHashMap 会把整个Map 划分成几个片段，只对相关的几个片段上锁，同时允许多线程
访问其他未上锁的片段。
同样的， CopyOnWriteArrayList 允许多个线程以非同步的方式读，当有线程写的时候它会将整个List
复制一个副本给它。
如果在读多写少这种对并发集合有利的条件下使用并发集合，这会比使用同步集合更具有可伸缩性。

















